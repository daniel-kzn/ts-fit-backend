// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            String   @id @default(uuid())
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  hash_password String?
  email         String   @unique

  first_name    String?
  last_name     String?
  birthday      DateTime?
  sexe          String?
  subscribed    Boolean?
  subscribed_at DateTime?

  Reservations Reservations[]

  role    Roles? @relation(fields: [role_id], references: [id])
  role_id Int?
}

model Roles {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  Users Users[]
}

// Reservations d'un horaire

// one-to-many
// Une reversation peut avoir plusieurs horaires
model Reservations {
  id                 String    @id @default(uuid())
  created_at         DateTime  @default(now())
  updated_at         DateTime  @default(now())
  user               Users     @relation(fields: [user_id], references: [id])
  user_id            String
  schedule           Schedules @relation(fields: [schedule_id], references: [id])
  schedule_id        String
  reserved_at        DateTime  @default(now())
  reservation_status String
}

// Cours de thai, boxe, karat√©
model Courses {
  id           Int        @id @default(autoincrement())
  name         String
  descriptions String
  type         String
  sessions     Sessions[]
}

// Cours de Thai avec les membres
model Sessions {
  id           String      @id @default(uuid())
  created_at   DateTime    @default(now())
  updated_at   DateTime    @default(now())
  name         String
  descriptions String
  course       Courses     @relation(fields: [course_id], references: [id])
  course_id    Int
  Schedules    Schedules[]
}

// horaires de la session cours de boxe
model Schedules {
  id           String         @id @default(uuid())
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now())
  start_at     DateTime
  finish_at    DateTime
  session      Sessions       @relation(fields: [session_id], references: [id])
  session_id   String
  Reservations Reservations[]
}
